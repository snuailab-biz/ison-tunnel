calibration:
    title: Calibration Manual
    content: |
        개요 : 
        Origin Image를 확인하고 calibration에 필요한 값을 변경하여 Undist Image를 눌러 어떻게 변경되었는지 확인하는 부분입니다.
        Undist Image에서 각 fx, fy, cx, cy, undist params를 변경하여 이미지가 변경되는지 확인합니다.

        설명 : 
        기본적으로 Load Camera 버튼을 눌러 작업을 진행할 수 있는지 확인합니다. (ON)이 되면 가능.
        Undist Image 버튼을 눌러 이미지를 불러옵니다.
        불러온 이미지에서 아래 key 설명을 보고 눌러 변경되는 이미지를 보고 저장합니다.
        camera parameter를 변경한 후 2 버튼을 눌러 현재 calib config를 저장합니다.
        저장된 parameter는 root/configure/filed/cam{number}에 저장됩니다.

        Key:
         a : Undistortion parameter p1값을 +0.001
         s : Undistortion parameter p1값을 -0.001
         d : Undistortion parameter p2값을 +0.001
         f : Undistortion parameter p2값을 -0.001
         z : Undistortion parameter p3값을 +0.001
         x : Undistortion parameter p3값을 -0.001
         c : Undistortion parameter p4값을 +0.001
         v : Undistortion parameter p4값을 -0.001

         y : camera parameter px값을 +0.1
         u : camera parameter px값을 -0.1
         i : camera parameter cy값을 +0.1
         o : camera parameter cy값을 -0.1

         j : 각도(theta)를 조절합니다. +0.1
         k : 각도(theta)를 조절합니다. -0.1

         1 : 현재 저장된 파라미터로 초기화합니다.
         2 : Calibration Parameter Config를 저장합니다. path : root/configure/filed/camN/params.json

event:
    title: Event Maual
    content: |
        개요 :
        Event 처리를 하기 위해서는 차량이 지내가는 라인에 대한 정보를 얻어야합니다.
        그 정보를 얻기 위해서는 각 cam에 대한 line 정보를 등록해야합니다.

        설명 : 
        기본적으로 Load Camera 버튼을 눌러 작업을 진행할 수 있는지 확인합니다. (ON)이 되면 가능.
        Cam버튼을 눌러 이미지를 불러옵니다.
        불러온 이미지에서 위에서부터 line1, line2, line3, line4에 해당하는 mask를 그립니다.
        이미지 위에 마우스를 클릭하면 그림을 그립니다. 1차선에서 2차선을 넘어가는 부분을 왼쪽에서부터 클릭합니다.
        끝까지 클릭을 했으면 s버튼을 누릅니다.
        다음 라인을 그리고 다시 s ... 최종 마지막 전 차선과 마지막 차선사이의 그림을 그렸다면 e 버튼을 누르십시오.

        Key : 
         s : 중간 line mask save
         e : 최종 line mask save 
         b : 되돌리기 
         -----
         params:
         check_frame : 이 수만큼 연속된 frame에서 동일한 이벤트가 발생하였을 때 이벤트 전달.
         detect_ip : Detector Server IP 주소 (localhost)
         detect_port : Detector Server Port 주소 (Default : 9999)
         dist_thr : 정지 관련 이벤트 발생에 대해서 N(유클리디안) 만큼 거리가 멀어지지 않으면 정지한 상태로 판단.
         life : 객체(차량) 발생 이후 N(frame)만큼 객체가 존재하지 않으면 제거
         retry : Detector Server와 통신을 N번 만큼 시도.
         show : 결과 visualization

rtsp:
    title: rtsp_text
    content: |
        두 번째 설명서의 내용...

simulator:
    title: simulator_text
    content: |
        첫 번째 설명서의 내용...

stitch:
    title: stitch_text
    content: |
        개요 : 
        Stitching을 진행하기 위해서는 각 cam간의 겹치는 점을 찾아야한다. 
        또한 각 라인별로 변형하기 때문에 각 라인에 대한 교차점을 찾아야한다.
        이 과정을 통해 parameter를 저장하면 실제 스티칭 프로그램에서 여기서 설정한 값을 통해 스티칭을 진행할 수 있다.
        
        설명 : 
        기본적으로 Load Camera 버튼을 눌러 작업을 진행할 수 있는지 확인합니다. (ON)이 되면 가능.
        Cam 버튼을 눌러 이미지를 불러옵니다.
        불러온 이미지에서 아래 key 설명을 보고 line을 그리고 교차점을 설정합니다.
        가로선은 왜곡이 얼마나 되었는지에 따라 각도를 조절하여 왼쪽, 오른쪽에 그립니다. 총 2개
        세로선은 각 차선이 넘어가는 부분에 그리고 첫 번째 차선과 인도 부분, 인도 부분과 위쪽 배경부분도 그린다. 총 5개 
        저장된 parameter는 root/configure/filed/cam{number}/params.json에 덮어쓰입니다.

        Key : 
         방향키 left : 라인을 왼쪽으로 이동
         방향키 right : 라인을 오른쪽으로 이동
         방향키 up : 세로라인인 경우; 각도 조절, 가로라인인 경우; 위쪽으로 이동
         방향키 donw : 세로라인인 경우; 각도 조절, 가로라인인 경우; 아래쪽으로 이동
         shift 키 : 이동되는 라인의 step 변경 (1 -> 10, 10 -> 1)
         n : 세로라인 가로라인 변경
         s : 라인의 위치를 정한후 저장
         1 : 세로라인 가로라인을 저장하였을 경우 두 라인의 교차점 찾기
         = : 1버튼을 통해 찾은 교차점을 이미지 위에 그리기(circle)
         2 : 교차점에 대한 point를 config파일로 저장(params.json)
         3 : 각 교차점과 line정보를 통해 스티치할 수 있도록 이미지 변형









detector:
    title: detector_text
    content: |
        두 번째 설명서의 내용...